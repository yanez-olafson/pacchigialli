## DHL EXPRESS ITALIA - 2022 - IT Security
## 12 / 07 / 2022 - Alberto Luca Biasibetti
## SNIGIO - LT1 SNIFFER
## For Red Hat Enterprise Linux 7
## See the nxlog reference manual about the configuration options. It should be installed locally

User nxlog
Group nxlog
#Panic Soft

# default values:
# FailureCodeFile   /opt/nxlog/var/run/nxlog/nxlog.FailureCode
# CacheDir  /opt/nxlog/var/spool/nxlog
# ModuleDir /opt/nxlog/lib/nxlog/modules
SpoolDir /opt/nxlog/var/spool/nxlog

#define CERTDIR /opt/nxlog/var/lib/nxlog/cert
#define CONFDIR /opt/nxlog/var/lib/nxlog

# Note that these two lines define constants only; the log file location
# is ultimately set by the `LogFile` directive (see below). The
# `MYLOGFILE` define is also used to rotate the log file automatically
# (see the `_fileop` block).
define LOGDIR /var/log/nxlog
define MYLOGFILE %LOGDIR%/nxlog.log

# By default, `LogFile %MYLOGFILE%` is set in log4ensics.conf. This
# allows the log file location to be modified via NXLog Manager. If you
# are not using NXLog Manager, you can instead set `LogFile` below and
# disable the `include` line.
#LogFile %MYLOGFILE%
#include %CONFDIR%/log4ensics.conf

########################################
# Global directives                    #
########################################
#User nxlog
#Group nxlog

LogFile %MYLOGFILE%
LogLevel INFO

########################################
# Extensions                           #
########################################

<Extension gelf>
        Module xm_gelf
</Extension>

<Extension python>
	Module 		xm_python
	PythonCode 	/opt/nxlog/etc/PARSER/SNIGIO_Parser.py
</Extension>

########################################
# INPUT                                #
########################################

<Input LT1_IN>
    Module  		im_file
    ReadFromLast	    TRUE
    SavePos		        TRUE
    CloseWhenIdle	    TRUE
    File    		    "/var/log/SNIGIO3/snigio3.log"
    Exec            	if $raw_event =~ /(T1T2)|(T2T1)|(Sniffer)|(Error)/mi { } else { drop(); }
    Exec                if $raw_event =~ /(Error2 in Snigio Parsing, packet lost)/mi { drop(); }
    Exec            	if $raw_event =~ /(?<=\"SedeDHL:)(.*?)(?=\")/mi $SedeDHL = $0;
    Exec                if $raw_event =~ /(?<=\"Message:)(.*?)(?=\")/mi $msg_parser = $0;
    Exec                $ShortMessage = $raw_event;
    Exec                $Exception = "NoException";
    Exec                $FailureCode = "NoFailureCode";
    Exec                $Message_Type = "NO";
    Exec		        $wpid = "TPL.003.MAG-SORTER";
</Input>

########################################
# PROCESSOR                            #
########################################

<Processor MP_Processor>
    Module              pm_null
    LogqueueSize        1000

    ## Extract Message Information
    Exec                python->python_call('parser_LT1');
    ## Delete msg_parser variable for extracted data
    #Exec                delete($msg_parser);
    # Request to map Fail as LT1 exception COY - Please change excheption chute name for site
    Exec                if $Message_Type =~ /I_SI/ AND get_var('Exception_p' + $VID) == "NoException" AND ($Destination_Chute =~ /EXC01/ OR $Destination_Chute =~ /EXC02/) { $LT1_Fail = "YES"; if not defined get_var('LT1_Fail_p' + $VID) { create_var('LT1_Fail_p' + $VID, 7200); set_var('LT1_Fail_p' + $VID, $LT1_Fail); } }
    ## Create pREVIOUS Exception or FailureCode and track in I_SI, I_SR and I_SI
    Exec                if $Message_Type =~ /I_SR/ { if not defined get_var('Exception_p' + $VID) { create_var('Exception_p' + $VID, 7200); set_var('Exception_p' + $VID, $Exception); } }
    Exec                if $Message_Type =~ /I_SR/ { if not defined get_var('FailureCode_p' + $VID) { create_var('FailureCode_p' + $VID, 7200); set_var('FailureCode_p' + $VID, $FailureCode); } }
    Exec                if $Message_Type =~ /I_SI/ AND $Exception =~ /NoException/ { $Exception = get_var('Exception_p' + $VID); } else { if not defined get_var('Exception_p' + $VID) { create_var('Exception_p' + $VID, 7200); set_var('Exception_p' + $VID, $Exception); } }
    Exec                if $Message_Type =~ /I_SI/ AND $FailureCode =~ /NoFailureCode/ { $FailureCode = get_var('FailureCode_p' + $VID); } else { if not defined get_var('FailureCode_p' + $VID) { create_var('FailureCode_p' + $VID, 7200); set_var('FailureCode_p' + $VID, $FailureCode); } }
    Exec                if $Message_Type =~ /I_DR/ AND $Exception =~ /NoException/ { $Exception = get_var('Exception_p' + $VID); } 
    Exec                if $Message_Type =~ /I_DR/ AND $FailureCode =~ /NoFailureCode/ { $FailureCode = get_var('FailureCode_p' + $VID); }
    Exec                if $Message_Type =~ /I_DR/ AND get_var('LT1_Fail_p' + $VID) =~ /YES/ { $LT1_Fail = "YES"; }

    Exec                if not defined get_var('Message_Type_p' + $VID + $Message_Type) { create_var('Message_Type_p' + $VID + $Message_Type, 7200); set_var('Message_Type_p' + $VID + $Message_Type, $Message_Type); }
    Exec                if $Message_Type == "I_SR" { if not defined get_var('Frame_Time_P' + $VID + $Message_Type) { create_var('Frame_Time_P' + $VID + $Message_Type, 7200); set_var('Frame_Time_P' + $VID + $Message_Type, $Frame_Time); } } \
                        else if $Message_Type == "I_SR" { if not defined get_var('Frame_Time_P' + $VID + $Message_Type + $HDMGID) { create_var('Frame_Time_P' + $VID + $Message_Type  + $HDMGID, 7200); set_var('Frame_Time_P' + $VID + $Message_Type + $HDMGID, $Frame_Time); } }
    Exec                if not defined get_var('vid_count' + $VID) { create_var('vid_count' + $VID, 7200); set_var('vid_count' + $VID, 0); }
   
    ## Check Message_Type and set up Frame_Time_P (FRAME TIME PRECEDENTE - (Before)) only for I_SR and I_SR.
    ## Check Message_Type and do timedata difference between I_SR / I_SI
    #Exec                if $Message_Type =~ /I_SI/ AND get_var('Exception_p' + $VID) == "NoException" AND ($Destination_Chute =~ /EXC01/ OR $Destination_Chute =~ /EXC02/) { $Exception = "LT1_Fail"; }
    
    Exec                if $Message_Type == "I_SR" { set_var('Frame_Time_P' + $VID + $Message_Type, $Frame_Time); $NoTOW = "X"; } \
                        else if $Message_Type == "I_SI" { $Frame_Time_P = get_var('Frame_Time_P' + $VID + 'I_SR'); python->python_call('data_man_LT1'); delete_var('Frame_Time_P' + $VID + 'I_SR'); } \
    
    ## Calculating VID count.
    Exec                if $VID != "" { $vid_count = get_var('vid_count' + $VID) + 1; set_var('vid_count' + $VID, get_var('vid_count' + $VID) + 1 ); } else { $VID = "N/A"; }
    
    #Message_Type
    Exec                if $TYPE =~ /H/ AND $Message_Body_Length =~ /000000/ { $Message_Type = "Heartbeat"; }
    Exec                if $TYPE =~ /A/ AND $Message_Body_Length =~ /000000/ { $Message_Type = "ACK"; }

    #Reporting Barcode $Captured_barcode
    Exec                if $Message_Type == "I_SR" { if not defined get_var('Captured_barcode_p' + $VID) { create_var('Captured_barcode_p' + $VID, 7200); set_var('Captured_barcode_p' + $VID, $Captured_barcode); } }
    Exec                if $Message_Type == "I_SI" { $Captured_barcode = get_var('Captured_barcode_p' + $VID); set_var('Captured_barcode' + $Captured_barcode, get_var('Captured_barcode' + $VID)); } \
                        else if $Message_Type == "I_DR" { $Captured_barcode = get_var('Captured_barcode_p' + $VID); set_var('Captured_barcode' + $Captured_barcode, get_var('Captured_barcode' + $VID)); } 

</Processor>

########################################
# OUTPUT                               #
########################################

<Output LT1_OUT>
	Module		        om_ssl
	Host		        visual-log.it.express.dhl.com
    port		        4001
    OutputType	        GELF_TCP
    CAFile		        /opt/cert/snigio/graylog-cluster-ita.dhl.com.pem
    Exec                $Stream = 'LT1';
    #Delete Message_Type not managed (temporally)
    Exec                if not ($Message_Type =~ /I_SR/ OR $Message_Type =~ /I_SI/ OR $Message_Type =~ /I_DR/) { delete($Exception); delete($FailureCode); delete($VID); }
    Exec                if $Message_Type =~ /NO/ { delete($Message_Type); } 
    #Delete LINE_PROCESS if not I_SR (IN > 12H)
    #Exec                if $Message_Type != "I_SR" { delete($LINE_PROCESS); }
    Exec                if ( $Message_Type =~ /I_DR/ OR $Message_Type =~ /I_SI/ )AND $Exception =~ /NoException/ AND $LT1_Fail =~ /YES/ { $Exception = "LT1_Fail"; }
    # Add PIDLINK Data
    Exec                python->python_call('PID_JJD_LT1');
</Output>

########################################
# Routes                               #
########################################

<Route LT1>
    Path        LT1_IN => MP_Processor => LT1_OUT
</Route>
