## DHL EXPRESS ITALIA - 2022 - IT Security
## 12 / 07 / 2022 - Alberto Luca Biasibetti
## SNIGIO - SATS SNIFFER
## For Red Hat Enterprise Linux 7
## See the nxlog reference manual about the configuration options. It should be installed locally

User nxlog
Group nxlog
Panic Soft

# default values:
# PidFile   /opt/nxlog/var/run/nxlog/nxlog.pid
# CacheDir  /opt/nxlog/var/spool/nxlog
# ModuleDir /opt/nxlog/lib/nxlog/modules
SpoolDir /opt/nxlog/var/spool/nxlog

#define CERTDIR /opt/nxlog/var/lib/nxlog/cert
#define CONFDIR /opt/nxlog/var/lib/nxlog

# Note that these two lines define constants only; the log file location
# is ultimately set by the `LogFile` directive (see below). The
# `MYLOGFILE` define is also used to rotate the log file automatically
# (see the `_fileop` block).
define LOGDIR /var/log/nxlog
define MYLOGFILE %LOGDIR%/nxlog.log

# By default, `LogFile %MYLOGFILE%` is set in log4ensics.conf. This
# allows the log file location to be modified via NXLog Manager. If you
# are not using NXLog Manager, you can instead set `LogFile` below and
# disable the `include` line.
#LogFile %MYLOGFILE%
#include %CONFDIR%/log4ensics.conf

########################################
# Global directives                    #
########################################
#User nxlog
#Group nxlog

LogFile %MYLOGFILE%
LogLevel INFO

########################################
# Extensions                           #
########################################

<Extension gelf>
        Module xm_gelf
</Extension>

<Extension python>
	Module 		xm_python
	PythonCode 	/opt/nxlog/etc/PARSER/SNIGIO_Parser.py
</Extension>

########################################
# INPUT                                #
########################################

<Input SATS_IN>
    Module  		    im_file
    ReadFromLast	    TRUE
    SavePos		        TRUE
    CloseWhenIdle	    TRUE
    File    		    "/var/log/SNIGIO3/snigio*.log"
    Exec                if $raw_event =~ /(<\/ns2:performNCYLookupResponse>)/mi { drop(); } \
                        else if $raw_event =~ /(performLogin>)/mi { drop(); } \
                        else if $raw_event =~ /(Error2 in Snigio Parsing, packet lost)/mi { drop(); } \
                        else if $raw_event =~ /(performLoginResponse)/mi { drop(); } \
                        else if $raw_event =~ /(<title>Bad Request<\/title>)/mi { drop(); }
    Exec                if $raw_event =~ /(?<=\"Frame_time:)(.*?)(?=\")/mi $Frame_Time = $0;
    Exec                if $raw_event =~ /(?<=\"SedeDHL:)(.*?)(?=\")/mi $SedeDHL = $0;
    Exec                if $raw_event =~ /(?<=\"MQTYPE:)(.*?)(?=\")/mi $MQTYPE = $0;    
    Exec                if $raw_event =~ /(?<=MQCODE:)(.*?)(?=>)/mi $MQCODE = $0;
    Exec                if $raw_event =~ /(?<=\<HDEVTM\>)(.*?)(?=\<\/HDEVTM\>)/mi $HDEVTM = $0;
    Exec		        if $raw_event =~ /(?<=\<MSG\>)(.*?)(?=\<\/MSG\>)/mi { $MSG = $0; } \
			            else if $raw_event =~ /(?<=Message:)(.*?)(?=<IP_SOURCE:)/mi { $MSG = $0; }
    Exec                $ShortMessage = $MSG;
    ## Extract HDMGTP
    Exec                if $raw_event =~ /(?<=\<HDMGTP\>)(.*?)(?=\<\/HDMGTP\>)/mi $HDMGTP = $0;
    Exec                if $raw_event =~ /(?<=\<VID\>)(.*?)(?=\s*\<\/VID\>)/mi { $VID = $0; } else { $VID = ""; }
</Input>

########################################
# PROCESSOR                            #
########################################

<Processor MP_Processor>
    Module              pm_null
    LogqueueSize        1000

    ## Parse datatime frome Frame_time
    Exec                python->python_call('reorder_time');
    
    ## Define persistent variable check_vid to store vid value for 14400 seconds (8 hours).
    
    Exec                if not defined get_var('HDMGTP_p' + $VID + $HDMGTP) { create_var('HDMGTP_p' + $VID + $HDMGTP, 14400); set_var('HDMGTP_p' + $VID + $HDMGTP, $HDMGTP); }
    Exec                if $HDMGTP == "SORT_RQST" { if not defined get_var('Frame_Time_P' + $VID + $HDMGTP) { create_var('Frame_Time_P' + $VID + $HDMGTP, 14400); set_var('Frame_Time_P' + $VID + $HDMGTP, $Frame_Time); } } \
                        else if $HDMGTP == "SORT_RSLT" { if not defined get_var('Frame_Time_P' + $VID + $HDMGTP + $HDMGID) { create_var('Frame_Time_P' + $VID + $HDMGTP  + $HDMGID, 14400); set_var('Frame_Time_P' + $VID + $HDMGTP + $HDMGID, $Frame_Time); } } \
                        else if $HDMGTP == "ITEM_DATA" { if not defined get_var('Frame_Time_P' + $VID + $HDMGTP + $HDMGID) { create_var('Frame_Time_P' + $VID + $HDMGTP  + $HDMGID, 14400); set_var('Frame_Time_P' + $VID + $HDMGTP + $HDMGID, $Frame_Time); } }
    
    Exec                if not defined get_var('vid_count' + $VID) { create_var('vid_count' + $VID, 14400); set_var('vid_count' + $VID, 0); }

    ## Check HDMGTP and set up Frame_Time_P (FRAME TIME PRECEDENTE - (Before)) only for SORT_RQST and SORT_RSLT.
    ## Check HDMGTP and do timedata difference between SORT_RQST / SORT_INST or SORT_RSLT / SORT_ACK 
    
    Exec                if $HDMGTP == "ITEM_DATA" { set_var('Frame_Time_P' + $VID + $HDMGTP, $Frame_Time); $NoTOW = "X"; } \
                        else if $HDMGTP == "LP_INST" { $Frame_Time_P = get_var('Frame_Time_P' + $VID + 'ITEM_DATA'); python->python_call('data_man_SATS'); delete_var('Frame_Time_P' + $VID + 'ITEM_DATA'); } \
                        
    Exec                if $HDMGTP == "SORT_RQST" { set_var('Frame_Time_P' + $VID + $HDMGTP, $Frame_Time); $NoTOW = "X"; } \
                        else if $HDMGTP == "SORT_INST" { $Frame_Time_P = get_var('Frame_Time_P' + $VID + 'SORT_RQST'); python->python_call('data_man_SATS'); delete_var('Frame_Time_P' + $VID + 'SORT_RQST'); } \
                        else if $HDMGTP == "SORT_RSLT" { set_var('Frame_Time_P' + $VID + $HDMGTP, $Frame_Time); $NoTOW = "X"; } \
                        else if $HDMGTP == "SORT_ACK" { $Frame_Time_P = get_var('Frame_Time_P' + $VID + 'SORT_RSLT' + $HDMGID); python->python_call('data_man_SATS'); delete_var('Frame_Time_P' + $VID + 'SORT_RSLT' + $HDMGID); } else { $NoTOW = "X"; }
    
    ## Calculating VID count.
    Exec                if $VID != "" { $vid_count = get_var('vid_count' + $VID) + 1; set_var('vid_count' + $VID, get_var('vid_count' + $VID) + 1 ); } else { $VID = "N/A"; }
  
    ## Some Sniffer control error fix
    Exec                if $Frame_Time == "N" delete($Frame_Time);

</Processor>

########################################
# OUTPUT                               #
########################################

<Output SATS_OUT>
	Module		        om_ssl
    Host                visual-log.it.express.dhl.com
    port                4000
    CAFile              /opt/cert/snigio/graylog-cluster-ita.dhl.com.pem
    OutputType	        GELF_TCP
    Exec                $Stream = 'SATS'; 
</Output>

########################################
# Routes                               #
########################################

<Route SATS>
    Path        SATS_IN => MP_Processor => SATS_OUT
</Route>